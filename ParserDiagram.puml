@startuml
!theme reddress-darkorange
skinparam class {
  attributeIconSize 8
}
namespace parser {
    class Alias << (S,Aquamarine) >> {
        + Name string
        + PackageName string
        + AliasOf string

    }
    class ClassDiagramOptions << (S,Aquamarine) >> {
        + FileSystem afero.Fs
        + Directories []string
        + IgnoredDirectories []string
        + RenderingOptions map[RenderingOption]interface{}
        + Recursive bool

    }
    class ClassParser << (S,Aquamarine) >> {
        - renderingOptions *RenderingOptions
        - structure map[string]map[string]*Struct
        - allInterfaces map[string]struct{}
        - allStructs map[string]struct{}
        - allImports map[string]string
        - allAliases map[string]*Alias
        - allRenamedStructs map[string]map[string]string

        - getOrCreateStruct(pkgName string, structName string) *Struct
        - getPackageName(t string, st *Struct) string
        - getStruct(structName string) *Struct
        - parseAlias(currentPackageName string, obj types.Object) bool
        - parseDirectory(directoryPath string) error
        - parseFunctions(pkg *packages.Package)
        - parseImports(pkg *packages.Package)
        - parseInterface(currentPackageName string, obj types.Object) bool
        - parsePackage(pkg *packages.Package)
        - parseStruct(currentPackageName string, obj types.Object) bool
        - parseTypes(pkg *packages.Package)
        - renderAggregationMap(aggregationMap map[string]struct{}, structure *Struct, aggregations *LineStringBuilder, name string)
        - renderAggregations(structure *Struct, name string, aggregations *LineStringBuilder)
        - renderAliases(str *LineStringBuilder)
        - renderCompositions(structure *Struct, name string, composition *LineStringBuilder)
        - renderExtends(structure *Struct, name string, extends *LineStringBuilder)
        - renderStructFields(structure *Struct, privateFields *LineStringBuilder, publicFields *LineStringBuilder)
        - renderStructMethods(structure *Struct, privateMethods *LineStringBuilder, publicMethods *LineStringBuilder)
        - renderStructure(structure *Struct, name string, str *LineStringBuilder, composition *LineStringBuilder, extends *LineStringBuilder, aggregations *LineStringBuilder)
        - renderStructures(pack string, structures map[string]*Struct, str *LineStringBuilder)
        - updatePrivateAggregations(structure *Struct, aggregationsMap map[string]struct{})

        + Render() string
        + SetRenderingOptions(ro map[RenderingOption]interface{}) error

    }
    class Field << (S,Aquamarine) >> {
        + Name string
        + Type string
        + FullType string

    }
    class Function << (S,Aquamarine) >> {
        + Name string
        + Parameters []*Field
        + ReturnValues []string
        + PackageName string
        + FullNameReturnValues []string

        + SignaturesAreEqual(function *Function) bool

    }
    class LineStringBuilder << (S,Aquamarine) >> {
        + WriteLineWithDepth(depth int, str string)

    }
    class RenderingOptions << (S,Aquamarine) >> {
        + Title string
        + Notes string
        + Theme string
        + Aggregations bool
        + Fields bool
        + Methods bool
        + Compositions bool
        + Implementations bool
        + Aliases bool
        + ConnectionLabels bool
        + AggregatePrivateMembers bool
        + PrivateMembers bool

    }
    class Struct << (S,Aquamarine) >> {
        + PackageName string
        + Functions []*Function
        + Fields []*Field
        + Type string
        + Composition map[string]struct{}
        + Extends map[string]struct{}
        + Aggregations map[string]struct{}
        + PrivateAggregations map[string]struct{}

        - addToPrivateAggregation(fType string)

        + AddField(field *types.Var, imports map[string]string)
        + AddMethod(method *types.Func, aliases map[string]string)
        + AddToAggregation(fType string)
        + AddToComposition(fType string)
        + AddToExtends(fType string)
        + ImplementsInterface(inter *Struct) bool

    }
    class []Alias << (S,Aquamarine) >> {
        + Len() int
        + Less(i int, j int) bool
        + Swap(i int, j int)

    }
    class parser.AliasSlice << (T, #FF7700) >>  {
    }
    class parser.RenderingOption << (T, #FF7700) >>  {
    }
}
"strings.Builder" *-- "extends""parser.LineStringBuilder"


"parser.ClassDiagramOptions""uses" o-- "afero.Fs"
"parser.ClassDiagramOptions""uses" o-- "parser.RenderingOption"
"parser.ClassParser""uses" o-- "parser.Alias"
"parser.ClassParser""uses" o-- "parser.RenderingOptions"
"parser.ClassParser""uses" o-- "parser.Struct"
"parser.Function""uses" o-- "parser.Field"
"parser.Struct""uses" o-- "parser.Field"
"parser.Struct""uses" o-- "parser.Function"

"__builtin__.int" #.. "alias of""parser.RenderingOption"
"parser.[]Alias" #.. "alias of""parser.AliasSlice"
@enduml
