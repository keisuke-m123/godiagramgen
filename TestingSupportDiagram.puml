@startuml
!theme reddress-darkorange
skinparam class {
  attributeIconSize 8
}
namespace connectionlabels {
    interface AbstractInterface  {
        - interfaceFunction() bool

    }
    class ImplementsAbstractInterface << (S,Aquamarine) >> {
        + PublicUse AbstractInterface

        - interfaceFunction() bool

    }
    class connectionlabels.AliasOfInt << (T, #FF7700) >>  {
    }
}
"connectionlabels.AliasOfInt" *-- "extends""connectionlabels.ImplementsAbstractInterface"

"connectionlabels.AbstractInterface" <|-- "implements""connectionlabels.ImplementsAbstractInterface"

"connectionlabels.ImplementsAbstractInterface""uses" o-- "connectionlabels.AbstractInterface"

namespace parenthesizedtypedeclarations {
    interface Bar  {
        + Bar()

    }
    interface Foo  {
        + Foo()

    }
}



namespace renderingoptions {
    class Test << (S,Aquamarine) >> {
        - integer int

        - function()

    }
}



namespace subfolder {
    interface TestInterfaceAsField  {
    }
    interface test2  {
        - test()

    }
}
"subfolder.TestInterfaceAsField" *-- "extends""subfolder.test2"



namespace subfolder2 {
    class Subfolder2 << (S,Aquamarine) >> {
        + SubfolderFunction(b bool, i int) bool

    }
}

"subfolder3.SubfolderInterface" <|-- "implements""subfolder2.Subfolder2"


namespace subfolder3 {
    interface SubfolderInterface  {
        + SubfolderFunction( bool,  int) bool

    }
}



namespace testingsupport {
    class test << (S,Aquamarine) >> {
        - field int
        - field2 TestComplicatedAlias

        - test()

    }
    class testingsupport.TestComplicatedAlias << (T, #FF7700) >>  {
    }
    class testingsupport.myInt << (T, #FF7700) >>  {
    }
    class "func(strings.Builder) bool" as funcstringsBuilderbool {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}

"subfolder.test2" <|-- "implements""testingsupport.test"

"testingsupport.test""uses" o-- "testingsupport.TestComplicatedAlias"

"__builtin__.int" #.. "alias of""connectionlabels.AliasOfInt"
"__builtin__.int" #.. "alias of""testingsupport.myInt"
"testingsupport.funcstringsBuilderbool" #.. "alias of""testingsupport.TestComplicatedAlias"
@enduml
