@startuml
!theme reddress-darkorange
skinparam class {
    attributeIconSize 8
}
namespace aliasmethods {
    class "Code"  << (D,  ff7700ff) type of __int__ >> {
        + AsInt() int
    }
    class "Properties"  << (D,  ff7700ff)  >> {
        + Copy() Properties
    }
    class "StringList"  << (D,  ff7700ff)  >> {
        + Add(s string) StringList
    }
}
namespace aliasmethods {
    class "map[string]interface{}" as mapstringinterface << (m,  3cb371ff)  >> {
    }
}
"aliasmethods.mapstringinterface" #.. "aliasmethods.Properties"
namespace aliasmethods {
    class "[]string" as string << (s,  3cb371ff)  >> {
    }
}
"aliasmethods.string" #.. "aliasmethods.StringList"
namespace class {
    class "Diagram"  << (S,  7fffd4ff)  >> {
        - renderer *Renderer
        + Render() *Result
    }
}
"class.Diagram" o-- "renderer.Renderer"
namespace classdiagram {
    class "FlagSet"  << (S,  7fffd4ff)  >> {
        - set *FlagSet
        - values FlagValues
        + InitializeFlags() 
        + Values() FlagValues
    }
    class "FlagValues"  << (S,  7fffd4ff)  >> {
        + Ignore string
        + Title string
        + Notes string
        + Output string
        + Theme string
        + Recursive bool
    }
}
"classdiagram.FlagSet" o-- "pflag.FlagSet"
"classdiagram.FlagSet" o-- "classdiagram.FlagValues"
namespace connectionlabels {
    class "ImplementsAbstractInterface"  << (S,  7fffd4ff)  >> {
        + AliasOfInt AliasOfInt
        + PublicUse AbstractInterface
        - interfaceFunction() bool
    }
    interface AbstractInterface {
        - interfaceFunction() bool
    }
    class "AliasOfInt"  << (D,  ff7700ff) type of __int__ >> {
    }
}
"connectionlabels.AliasOfInt" *-- "connectionlabels.ImplementsAbstractInterface"
"connectionlabels.AbstractInterface" <|-- "connectionlabels.ImplementsAbstractInterface"
"connectionlabels.ImplementsAbstractInterface" o-- "connectionlabels.AbstractInterface"
namespace main {
}
namespace parenthesizedtypedeclarations {
    class "defaultFoo"  << (S,  7fffd4ff)  >> {
        + Foo() 
    }
    interface Bar {
        + Bar() 
    }
    interface Foo {
        + Foo() 
    }
}
"parenthesizedtypedeclarations.Foo" <|-- "parenthesizedtypedeclarations.defaultFoo"
namespace pkg {
    class "Diagram"  << (S,  7fffd4ff)  >> {
        - renderer *renderer
        + Render() string
    }
    class "renderer"  << (S,  7fffd4ff)  >> {
        - theme string
        - pkgGraph *PackageGraph
        - buildNamespace(pkgPath PackagePath) Element
        - namespacePath(pkgPath PackagePath) string
        - relationTargetName(pkgPath PackagePath) string
        - render() string
    }
}
"pkg.Diagram" o-- "pkg.renderer"
"pkg.renderer" o-- "gocode.PackageGraph"
namespace pkgdiagram {
    class "FlagSet"  << (S,  7fffd4ff)  >> {
        - set *FlagSet
        - values FlagValues
        + InitializeFlags() 
        + Values() FlagValues
    }
    class "FlagValues"  << (S,  7fffd4ff)  >> {
        + Ignore string
        + Output string
        + Theme string
        + Recursive bool
    }
}
"pkgdiagram.FlagSet" o-- "pflag.FlagSet"
"pkgdiagram.FlagSet" o-- "pkgdiagram.FlagValues"
namespace plantuml {
    class "ClassOptions"  << (S,  7fffd4ff)  >> {
        + As string
        + Spot Spot
        + Stereotype Stereotype
    }
    class "Color"  << (S,  7fffd4ff)  >> {
        - r uint8
        - g uint8
        - b uint8
        - a uint8
        + HexRGBA() string
    }
    class "ElementStore"  << (S,  7fffd4ff)  >> {
        - elements []Element
        + Add(es []Element) 
        + AsSlice() []Element
        + Merge(es *ElementStore) *ElementStore
    }
    class "LineStringBuilder"  << (S,  7fffd4ff)  >> {
        + Builder strings.Builder
        + WriteLineWithDepth(depth int, str string) 
    }
    class "NamespaceOptions"  << (S,  7fffd4ff)  >> {
        + As string
    }
    class "Param"  << (S,  7fffd4ff)  >> {
        + Name string
        + Type string
        - toString() string
    }
    class "RelationTarget"  << (S,  7fffd4ff)  >> {
        + Namespace string
        + Name string
        + String() string
    }
    class "Result"  << (S,  7fffd4ff)  >> {
        - builder *LineStringBuilder
        + String() string
    }
    class "ReturnValue"  << (S,  7fffd4ff)  >> {
        + Name string
        + Type string
        - toString() string
    }
    class "Spot"  << (S,  7fffd4ff)  >> {
        + Name rune
        + Color *Color
        - build() string
    }
    class "class"  << (S,  7fffd4ff)  >> {
        - name string
        - elements []Element
        - as string
        - stereotype Stereotype
        - spot Spot
        + Write(builder *LineStringBuilder, indent int) 
        - buildStereotype() string
    }
    class "field"  << (S,  7fffd4ff)  >> {
        - accessModifier AccessModifier
        - name string
        - typ string
        + Write(builder *LineStringBuilder, indent int) 
    }
    class "iface"  << (S,  7fffd4ff)  >> {
        - name string
        - elements []Element
        + Write(builder *LineStringBuilder, indent int) 
    }
    class "legend"  << (S,  7fffd4ff)  >> {
        - note string
        + Write(builder *LineStringBuilder, indent int) 
    }
    class "method"  << (S,  7fffd4ff)  >> {
        - accessModifier AccessModifier
        - name string
        - parameters Params
        - returnValues ReturnValues
        + Write(builder *LineStringBuilder, indent int) 
        - buildParameters() string
        - buildReturnValues() string
    }
    class "namespace"  << (S,  7fffd4ff)  >> {
        - val string
        - as string
        - elements []Element
        + Write(builder *LineStringBuilder, indent int) 
    }
    class "relation"  << (S,  7fffd4ff)  >> {
        - from RelationTarget
        - to RelationTarget
        - relationType RelationType
        + Write(builder *LineStringBuilder, indent int) 
        - buildRelationType() string
    }
    class "theme"  << (S,  7fffd4ff)  >> {
        - val string
        + Write(builder *LineStringBuilder, indent int) 
        - themeAdjustment(builder *LineStringBuilder, indent int) 
    }
    class "title"  << (S,  7fffd4ff)  >> {
        - val string
        + Write(builder *LineStringBuilder, indent int) 
    }
    interface Element {
        + Write(builder *LineStringBuilder, indent int) 
    }
    class "AccessModifier"  << (D,  ff7700ff) type of __int__ >> {
        - toString() string
    }
    class "Params"  << (D,  ff7700ff)  >> {
        - toString() string
    }
    class "RelationType"  << (D,  ff7700ff) type of __int__ >> {
    }
    class "ReturnValues"  << (D,  ff7700ff)  >> {
        - toString() string
    }
    class "Stereotype"  << (D,  ff7700ff) type of __string__ >> {
        - build() string
    }
}
"plantuml.ClassOptions" o-- "plantuml.Spot"
"plantuml.ClassOptions" o-- "plantuml.Stereotype"
"plantuml.ElementStore" o-- "plantuml.Element"
"strings.Builder" *-- "plantuml.LineStringBuilder"
"plantuml.Result" o-- "plantuml.LineStringBuilder"
"plantuml.Spot" o-- "plantuml.Color"
"plantuml.Element" <|-- "plantuml.class"
"plantuml.class" o-- "plantuml.Element"
"plantuml.class" o-- "plantuml.Spot"
"plantuml.class" o-- "plantuml.Stereotype"
"plantuml.Element" <|-- "plantuml.field"
"plantuml.field" o-- "plantuml.AccessModifier"
"plantuml.Element" <|-- "plantuml.iface"
"plantuml.iface" o-- "plantuml.Element"
"plantuml.Element" <|-- "plantuml.legend"
"plantuml.Element" <|-- "plantuml.method"
"plantuml.method" o-- "plantuml.AccessModifier"
"plantuml.method" o-- "plantuml.Params"
"plantuml.method" o-- "plantuml.ReturnValues"
"plantuml.Element" <|-- "plantuml.namespace"
"plantuml.namespace" o-- "plantuml.Element"
"plantuml.Element" <|-- "plantuml.relation"
"plantuml.relation" o-- "plantuml.RelationTarget"
"plantuml.relation" o-- "plantuml.RelationTarget"
"plantuml.relation" o-- "plantuml.RelationType"
"plantuml.Element" <|-- "plantuml.theme"
"plantuml.Element" <|-- "plantuml.title"
namespace plantuml {
    class "[]Param" as []Param << (s,  3cb371ff)  >> {
    }
}
"plantuml.[]Param" #.. "plantuml.Params"
namespace plantuml {
    class "[]ReturnValue" as []ReturnValue << (s,  3cb371ff)  >> {
    }
}
"plantuml.[]ReturnValue" #.. "plantuml.ReturnValues"
namespace renderer {
    class "Renderer"  << (S,  7fffd4ff)  >> {
        - relations *Relations
        - renderingOptions *RenderingOptions
        - structRenderer *structRenderer
        - interfaceRenderer *interfaceRenderer
        - definedTypeRenderer *definedTypeRenderer
        - aliasRenderer *aliasRenderer
        + Render() *Result
        - buildPackage(pkgName PackageName) *ElementStore
    }
    class "RenderingOptions"  << (S,  7fffd4ff)  >> {
        + Title string
        + Notes string
        + Theme string
    }
    class "aliasRenderer"  << (S,  7fffd4ff)  >> {
        - relations *Relations
        - buildTypeAliases() *ElementStore
    }
    class "definedTypeRenderer"  << (S,  7fffd4ff)  >> {
        - relations *Relations
        - methodRenderer *methodRenderer
        - build(definedType *DefinedType) Element
        - buildInPkg(pkgName PackageName) *ElementStore
        - buildMethods(definedType *DefinedType) *ElementStore
        - buildRelation(pkgName PackageName, dt *DefinedType) *ElementStore
        - buildRelations(pkgName PackageName) *ElementStore
        - sortedDefinedTypeNames(pkgName PackageName) []DefinedTypeName
    }
    class "interfaceRenderer"  << (S,  7fffd4ff)  >> {
        - relations *Relations
        - methodRenderer *methodRenderer
        - buildCompositions(iface *Interface) *ElementStore
        - buildInPkg(pkgName PackageName) *ElementStore
        - buildInterface(iface *Interface) Element
        - buildMethods(iface *Interface) *ElementStore
        - buildRelations(pkgName PackageName) *ElementStore
        - sortedInterfaceNames(pkgName PackageName) []InterfaceName
    }
    class "methodRenderer"  << (S,  7fffd4ff)  >> {
        - buildMethods(functions []*Function) *ElementStore
    }
    class "structRenderer"  << (S,  7fffd4ff)  >> {
        - relations *Relations
        - methodRenderer *methodRenderer
        - buildAggregations(st *Struct) *ElementStore
        - buildCompositions(s *Struct) *ElementStore
        - buildElementStructure(st *Struct) Element
        - buildExtends(st *Struct) *ElementStore
        - buildInPkg(pkgName PackageName) *ElementStore
        - buildStructCompositionFromField(structure *Struct, f *Field) *ElementStore
        - buildStructFields(st *Struct) *ElementStore
        - buildStructMethods(st *Struct) *ElementStore
        - buildStructRelation(st *Struct) *ElementStore
        - buildStructRelations(pkgName PackageName) *ElementStore
        - sortedStructNames(pkgName PackageName) []StructName
    }
}
"renderer.Renderer" o-- "gocode.Relations"
"renderer.Renderer" o-- "renderer.RenderingOptions"
"renderer.Renderer" o-- "renderer.aliasRenderer"
"renderer.Renderer" o-- "renderer.definedTypeRenderer"
"renderer.Renderer" o-- "renderer.interfaceRenderer"
"renderer.Renderer" o-- "renderer.structRenderer"
"renderer.aliasRenderer" o-- "gocode.Relations"
"renderer.definedTypeRenderer" o-- "gocode.Relations"
"renderer.definedTypeRenderer" o-- "renderer.methodRenderer"
"renderer.interfaceRenderer" o-- "gocode.Relations"
"renderer.interfaceRenderer" o-- "renderer.methodRenderer"
"renderer.structRenderer" o-- "gocode.Relations"
"renderer.structRenderer" o-- "renderer.methodRenderer"
namespace renderingoptions {
    class "Test"  << (S,  7fffd4ff)  >> {
        - integer int
        - function() 
    }
}
namespace subfolder {
    interface TestInterfaceAsField {
    }
    interface test2 {
        - test() 
    }
}
"subfolder.TestInterfaceAsField" *-- "subfolder.test2"
namespace subfolder2 {
    class "Subfolder2"  << (S,  7fffd4ff)  >> {
        + SubfolderFunction(b bool, i int) bool
    }
}
"subfolder3.SubfolderInterface" <|-- "subfolder2.Subfolder2"
namespace subfolder3 {
    interface SubfolderInterface {
        + SubfolderFunction(bool, int) bool
    }
}
namespace testingsupport {
    class "test"  << (S,  7fffd4ff)  >> {
        - field int
        - field2 TestComplicatedAlias
        - foo parenthesizedtypedeclarations.Foo
        - test() 
    }
    interface testInterface {
        - test() 
    }
    class "TestComplicatedAlias"  << (D,  ff7700ff)  >> {
    }
    class "definedTypeInt"  << (D,  ff7700ff) type of __int__ >> {
    }
}
"testingsupport.testInterface" <|-- "testingsupport.test"
"testingsupport.test" o-- "parenthesizedtypedeclarations.Foo"
"testingsupport.test" o-- "testingsupport.TestComplicatedAlias"
namespace testingsupport {
    class "func(strings.Builder) bool" as funcstringsBuilderbool << (f,  3cb371ff)  >> {
    }
}
"testingsupport.funcstringsBuilderbool" #.. "testingsupport.TestComplicatedAlias"
namespace testutil {
}
namespace testingsupport {
    class "aliasString"  << (T,  eddc44ff) alias of __string__ >> {
    }
}
@enduml
