@startuml
namespace aliasmethods {
    class "Code"  << (D,  ff7700ff) type of __int__ >> {
        + AsInt() int
    }
    class "Properties"  << (D,  ff7700ff)  >> {
        + Copy() Properties
    }
    class "StringList"  << (D,  ff7700ff)  >> {
        + Add(s string) StringList
    }
}
namespace aliasmethods {
    class "map[string]interface{}" as mapstringinterface << (m,  3cb371ff)  >> {
    }
}
"aliasmethods.mapstringinterface" #.. "aliasmethods.Properties"
namespace aliasmethods {
    class "[]string" as string << (s,  3cb371ff)  >> {
    }
}
"aliasmethods.string" #.. "aliasmethods.StringList"
namespace parenthesizedtypedeclarations {
    class "defaultFoo"  << (S,  7fffd4ff)  >> {
        + Foo() 
    }
    interface Bar {
        + Bar() 
    }
    interface Foo {
        + Foo() 
    }
}
"parenthesizedtypedeclarations.Foo" <|-- "parenthesizedtypedeclarations.defaultFoo"
namespace renderingoptions {
    class "Test"  << (S,  7fffd4ff)  >> {
        - integer int
        - function() 
    }
}
namespace subfolder3 {
    interface SubfolderInterface {
        + SubfolderFunction(bool, int) bool
    }
}
namespace testingsupport {
    class "definedTypeTime"  << (S,  7fffd4ff)  >> {
        - wall uint64
        - ext int64
        - loc *Location
    }
    class "test"  << (S,  7fffd4ff)  >> {
        - field int
        - field2 TestComplicatedAlias
        - field3 time.Time
        - foo parenthesizedtypedeclarations.Foo
        - test() 
    }
    interface testInterface {
        - returnTime() Time
        - test() 
    }
    class "TestComplicatedAlias"  << (D,  ff7700ff)  >> {
    }
    class "definedTypeFunc"  << (D,  ff7700ff)  >> {
    }
    class "definedTypeInt"  << (D,  ff7700ff) type of __int__ >> {
    }
}
"testingsupport.test" o-- "parenthesizedtypedeclarations.Foo"
"testingsupport.test" o-- "testingsupport.TestComplicatedAlias"
namespace testingsupport {
    class "func(strings.Builder) bool" as funcstringsBuilderbool << (f,  3cb371ff)  >> {
    }
}
"testingsupport.funcstringsBuilderbool" #.. "testingsupport.TestComplicatedAlias"
namespace testingsupport {
    class "func() *definedTypeInt" as func*definedTypeInt << (f,  3cb371ff)  >> {
    }
}
"testingsupport.func*definedTypeInt" #.. "testingsupport.definedTypeFunc"
namespace testingsupport {
    class "aliasString"  << (T,  eddc44ff) alias of __string__ >> {
    }
}
@enduml
